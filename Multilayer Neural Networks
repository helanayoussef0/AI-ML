{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Lab  #3\n",
        "\n",
        "First and Last Name: Helana Youssef\n",
        "\n",
        "Student ID: 500766171\n"
      ],
      "metadata": {
        "id": "uaanFxysMcx_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 1"
      ],
      "metadata": {
        "id": "V6OU12S8g9Pt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define the dataset\n",
        "data = np.array([[2, 10], [2, 5], [8, 4], [5, 8], [7, 5], [6, 4], [1, 2], [4, 9]])\n",
        "\n",
        "# Define the initial seeds\n",
        "centers = np.array([[2, 5], [8, 4], [4, 9]])\n",
        "\n",
        "# Define the number of clusters and the number of iterations\n",
        "k = len(centers)\n",
        "num_iterations = 10\n",
        "\n",
        "# Define a function to assign each data point to the nearest center\n",
        "def assign_clusters(data, centers):\n",
        "    distances = np.sqrt(np.sum((data - centers[:, np.newaxis])**2, axis=2))\n",
        "    return np.argmin(distances, axis=0)\n",
        "\n",
        "# Define a function to update the centers of the clusters\n",
        "def update_centers(data, clusters):\n",
        "    new_centers = np.zeros((k, 2))\n",
        "    for i in range(k):\n",
        "        new_centers[i] = np.mean(data[clusters == i], axis=0)\n",
        "    return new_centers\n",
        "\n",
        "# Run the k-means algorithm for one epoch\n",
        "clusters = assign_clusters(data, centers)\n",
        "new_centers = update_centers(data, clusters)\n",
        "\n",
        "# Q1. The new clusters\n",
        "print(\"The new clusters are:\")\n",
        "for i in range(k):\n",
        "    print(f\"Cluster {i+1}: {data[clusters==i]}\")\n",
        "\n",
        "# Q2. The centers of the new clusters\n",
        "print(\"\\nThe centers of the new clusters are:\")\n",
        "print(new_centers)\n",
        "\n",
        "# Q3. Plot a 10 by 10 space with all the 8 points and show the clusters after the first epoch\n",
        "fig, ax = plt.subplots()\n",
        "ax.scatter(data[:,0], data[:,1], c=clusters)\n",
        "ax.scatter(new_centers[:,0], new_centers[:,1], marker='x', s=200, linewidths=3, color='r')\n",
        "ax.set_xlim([0, 10])\n",
        "ax.set_ylim([0, 10])\n",
        "ax.set_title(\"Clusters after first epoch\")\n",
        "plt.show()\n",
        "\n",
        "# Q4. How many are more iterations needed to converge? Draw the result for each epoch.\n",
        "for i in range(num_iterations):\n",
        "    clusters = assign_clusters(data, new_centers)\n",
        "    new_centers = update_centers(data, clusters)\n",
        "    if np.allclose(centers, new_centers):\n",
        "        print(f\"\\nConverged after {i+1} iterations.\")\n",
        "        break\n",
        "    centers = new_centers\n",
        "    print(f\"\\nEpoch {i+1}\")\n",
        "    print(\"The new clusters are:\")\n",
        "    for j in range(k):\n",
        "        print(f\"Cluster {j+1}: {data[clusters==j]}\")\n",
        "    print(\"\\nThe centers of the new clusters are:\")\n",
        "    print(new_centers)\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.scatter(data[:,0], data[:,1], c=clusters)\n",
        "    ax.scatter(new_centers[:,0], new_centers[:,1], marker='x', s=200, linewidths=3, color='r')\n",
        "    ax.set_xlim([0, 10])\n",
        "    ax.set_ylim([0, 10])\n",
        "    ax.set_title(f\"Clusters after epoch {i+1}\")\n",
        "    plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "vTHp3cAiAGVw",
        "outputId": "af6ac124-96a5-484c-e0ad-8a9c04579e5a"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The new clusters are:\n",
            "Cluster 1: [[2 5]\n",
            " [1 2]]\n",
            "Cluster 2: [[8 4]\n",
            " [7 5]\n",
            " [6 4]]\n",
            "Cluster 3: [[ 2 10]\n",
            " [ 5  8]\n",
            " [ 4  9]]\n",
            "\n",
            "The centers of the new clusters are:\n",
            "[[1.5        3.5       ]\n",
            " [7.         4.33333333]\n",
            " [3.66666667 9.        ]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Epoch 1\n",
            "The new clusters are:\n",
            "Cluster 1: [[2 5]\n",
            " [1 2]]\n",
            "Cluster 2: [[8 4]\n",
            " [7 5]\n",
            " [6 4]]\n",
            "Cluster 3: [[ 2 10]\n",
            " [ 5  8]\n",
            " [ 4  9]]\n",
            "\n",
            "The centers of the new clusters are:\n",
            "[[1.5        3.5       ]\n",
            " [7.         4.33333333]\n",
            " [3.66666667 9.        ]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Converged after 2 iterations.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Define the data points\n",
        "data = np.array([[2, 10], [2, 5], [8, 4], [5, 8], [7, 5], [6, 4], [1, 2], [4, 9]])\n",
        "\n",
        "# Define the initial seeds\n",
        "seeds = np.array([[2, 5], [8, 4], [4, 9]])\n",
        "\n",
        "# Run k-means algorithm for one epoch\n",
        "kmeans = KMeans(n_clusters=3, init=seeds, n_init=1)\n",
        "kmeans.fit(data)\n",
        "\n",
        "# Get the labels and cluster centers\n",
        "labels = kmeans.labels_\n",
        "centers = kmeans.cluster_centers_\n",
        "\n",
        "# Print the labels and cluster centers\n",
        "print(\"Labels:\", labels)\n",
        "print(\"Cluster Centers:\", centers)\n",
        "\n",
        "# Run k-means algorithm until convergence\n",
        "kmeans = KMeans(n_clusters=3, init=seeds, n_init=1, max_iter=2)\n",
        "kmeans.fit(data)\n",
        "\n",
        "# Get the labels and cluster centers\n",
        "labels = kmeans.labels_\n",
        "centers = kmeans.cluster_centers_\n",
        "\n",
        "# Print the labels and cluster centers\n",
        "print(\"Labels:\", labels)\n",
        "print(\"Cluster Centers:\", centers)\n",
        "\n",
        "# Plot the data points and cluster centers\n",
        "plt.scatter(data[:,0], data[:,1], c=labels, cmap='rainbow')\n",
        "plt.scatter(centers[:,0], centers[:,1], marker='x', s=200, linewidths=3, color='black')\n",
        "plt.title('K-Means Clustering')\n",
        "plt.xlabel('X')\n",
        "plt.ylabel('Y')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 434
        },
        "id": "TVdfpUoGD6Tw",
        "outputId": "ad6c3e72-bd41-4568-a5d1-9dfb90c185d8"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Labels: [2 0 1 2 1 1 0 2]\n",
            "Cluster Centers: [[1.5        3.5       ]\n",
            " [7.         4.33333333]\n",
            " [3.66666667 9.        ]]\n",
            "Labels: [2 0 1 2 1 1 0 2]\n",
            "Cluster Centers: [[1.5        3.5       ]\n",
            " [7.         4.33333333]\n",
            " [3.66666667 9.        ]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 2"
      ],
      "metadata": {
        "id": "WwgGl9c9ic7P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# load the heart disease dataset\n",
        "url = 'https://raw.githubusercontent.com/tofighi/MachineLearning/master/datasets/heart.csv'\n",
        "heart_df = pd.read_csv(url)\n",
        "\n",
        "# convert famhist from categorical to numeric\n",
        "heart_df['famhist'] = heart_df['famhist'].map({'Present': 1, 'Absent': 0})\n",
        "\n",
        "# select sbp and tobacco features\n",
        "X = heart_df[['sbp', 'tobacco']]\n",
        "\n",
        "# create KMeans model with 2 clusters\n",
        "kmeans = KMeans(n_clusters=2, random_state=0)\n",
        "\n",
        "# fit KMeans model on the first 300 rows of data\n",
        "kmeans.fit(X[:300])\n",
        "\n",
        "# predict cluster labels for the remaining data\n",
        "y_pred = kmeans.predict(X[300:])\n",
        "\n",
        "# calculate accuracy\n",
        "y_true = heart_df['chd'][300:]\n",
        "accuracy = np.mean(y_pred == y_true)\n",
        "\n",
        "# print accuracy\n",
        "print(\"Accuracy: {:.2f}%\".format(accuracy * 100))\n",
        "\n",
        "# plot sbp vs tobacco with actual class labels\n",
        "plt.scatter(X['sbp'][300:], X['tobacco'][300:], c=y_true, cmap='viridis')\n",
        "plt.xlabel('sbp')\n",
        "plt.ylabel('tobacco')\n",
        "plt.title('Actual Data Points')\n",
        "plt.show()\n",
        "\n",
        "# plot sbp vs tobacco with predicted class labels\n",
        "plt.scatter(X['sbp'][300:], X['tobacco'][300:], c=y_pred, cmap='viridis')\n",
        "plt.xlabel('sbp')\n",
        "plt.ylabel('tobacco')\n",
        "plt.title('Predicted Data Points')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 645
        },
        "id": "sX9DTMxOEzqO",
        "outputId": "2a205367-4a22-4fdb-88b9-0c7170226993"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 67.90%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 3"
      ],
      "metadata": {
        "id": "FW0AqiKykuNU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import NearestNeighbors\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Define the data points\n",
        "X = np.array([[2, 10], [2, 5], [8, 4], [5, 8], [7, 5], [6, 4], [1, 2], [4, 9]])\n",
        "\n",
        "# Define the threshold value\n",
        "threshold = 4\n",
        "\n",
        "# Initialize the nearest neighbor object\n",
        "nn = NearestNeighbors(n_neighbors=2, metric='euclidean')\n",
        "\n",
        "# Fit the data to the nearest neighbor object\n",
        "nn.fit(X)\n",
        "\n",
        "# Initialize the clusters\n",
        "clusters = []\n",
        "\n",
        "# Iterate through the data points\n",
        "for i, x in enumerate(X):\n",
        "    # Check if the point has already been assigned to a cluster\n",
        "    if i not in [c for cluster in clusters for c in cluster]:\n",
        "        # Initialize a new cluster\n",
        "        new_cluster = [i]\n",
        "        # Get the indices of the nearest neighbors within the threshold value\n",
        "        neighbors = nn.radius_neighbors([x], radius=threshold, return_distance=False)[0]\n",
        "        # Add the neighbors to the cluster\n",
        "        new_cluster.extend(neighbors)\n",
        "        # Add the cluster to the list of clusters\n",
        "        clusters.append(new_cluster)\n",
        "\n",
        "# Print the clusters\n",
        "for i, cluster in enumerate(clusters):\n",
        "    print(f'Cluster {i+1}: {X[cluster]}')\n",
        "\n",
        "\n",
        "# Plot the data points\n",
        "plt.scatter(X[:, 0], X[:, 1])\n",
        "\n",
        "# Plot the clusters\n",
        "for cluster in clusters:\n",
        "    plt.scatter(X[cluster][:, 0], X[cluster][:, 1])\n",
        "\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 456
        },
        "id": "L2I1o8VuFqpX",
        "outputId": "33d963af-db63-4128-8175-21e34ffb4a03"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cluster 1: [[ 2 10]\n",
            " [ 2 10]\n",
            " [ 5  8]\n",
            " [ 4  9]]\n",
            "Cluster 2: [[2 5]\n",
            " [2 5]\n",
            " [1 2]]\n",
            "Cluster 3: [[8 4]\n",
            " [8 4]\n",
            " [7 5]\n",
            " [6 4]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q9: No, the results obtained using nearest neighbor clustering are different from those obtained using k-means."
      ],
      "metadata": {
        "id": "b2yBwft6FtiK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q11: K-means and nearest neighbor clustering algorithms have different strengths and weaknesses:\n",
        "\n",
        "K-means is faster and more scalable than nearest neighbor clustering, especially for large datasets.\n",
        "K-means is better suited for datasets with well-separated clusters, while nearest neighbor clustering is better suited for datasets with irregular or overlapping clusters.\n",
        "K-means requires the number of clusters to be specified in advance, while nearest neighbor clustering does not.\n",
        "K-means may converge to local optima, while nearest neighbor clustering does not have this problem.\n",
        "K-means assumes that the clusters have spherical shapes and similar sizes, while nearest neighbor clustering does not make any assumptions about the shapes or sizes of the clusters.\n",
        "For larger datasets, both algorithms may suffer from performance issues:\n",
        "\n",
        "K-means may become computationally expensive as the number of data points and/or dimensions increases.\n",
        "Nearest neighbor clustering may require a lot of memory and/or processing time if the dataset is very large, as it needs to compute the pairwise distances between all pairs of data points."
      ],
      "metadata": {
        "id": "mDRefrI0F9iP"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 4"
      ],
      "metadata": {
        "id": "BtCJ0vA2lRfZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import DBSCAN\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "# Define the data points\n",
        "X = np.array([[2, 10], [2, 5], [8, 4], [5, 8], [7, 5], [6, 4], [1, 2], [4, 9]])\n",
        "\n",
        "# Define the value of epsilon and min_samples\n",
        "epsilon = 2\n",
        "min_samples = 2\n",
        "\n",
        "# Initialize the DBSCAN object\n",
        "dbscan = DBSCAN(eps=epsilon, min_samples=min_samples, metric='euclidean')\n",
        "\n",
        "# Fit the data to the DBSCAN object\n",
        "dbscan.fit(X)\n",
        "\n",
        "# Get the cluster labels\n",
        "labels = dbscan.labels_\n",
        "\n",
        "# Print the cluster labels\n",
        "print(labels)\n",
        "\n",
        "# Plot the clusters\n",
        "plt.scatter(X[:, 0], X[:, 1], c=labels)\n",
        "plt.show()\n",
        "\n",
        "# Define the value of epsilon and min_samples\n",
        "epsilon = np.sqrt(10)\n",
        "min_samples = 2\n",
        "\n",
        "# Initialize the DBSCAN object\n",
        "dbscan = DBSCAN(eps=epsilon, min_samples=min_samples, metric='euclidean')\n",
        "\n",
        "# Fit the data to the DBSCAN object\n",
        "dbscan.fit(X)\n",
        "\n",
        "# Get the cluster labels\n",
        "labels = dbscan.labels_\n",
        "\n",
        "# Print the cluster labels\n",
        "print(labels)\n",
        "\n",
        "# Plot the clusters\n",
        "plt.scatter(X[:, 0], X[:, 1], c=labels)\n",
        "plt.show()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 548
        },
        "id": "lCsmguIXGe4Z",
        "outputId": "4fa5ac35-1fb6-4efe-9f43-18d67c065e8e"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-1 -1  0  1  0  0 -1  1]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 2 0 2 2 1 0]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 5"
      ],
      "metadata": {
        "id": "cA5eaX6VmznC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.cluster import DBSCAN\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# Load the heart disease dataset\n",
        "url = \"https://raw.githubusercontent.com/tofighi/MachineLearning/master/datasets/heart.csv\"\n",
        "heart_df = pd.read_csv(url)\n",
        "\n",
        "# Select the sbp and tobacco features\n",
        "X = heart_df[['sbp', 'tobacco']].values\n",
        "\n",
        "# Define the value of epsilon and min_samples\n",
        "epsilon = 10\n",
        "min_samples = 5\n",
        "\n",
        "# Initialize the DBSCAN object\n",
        "dbscan = DBSCAN(eps=epsilon, min_samples=min_samples, metric='euclidean')\n",
        "\n",
        "# Fit the data to the DBSCAN object\n",
        "dbscan.fit(X[:300])\n",
        "\n",
        "# Get the cluster labels for training data\n",
        "train_labels = dbscan.labels_\n",
        "\n",
        "# Get the cluster labels for test data\n",
        "test_labels = dbscan.fit_predict(X[300:])\n",
        "\n",
        "# Calculate the accuracy of the model\n",
        "true_labels = heart_df['chd'][300:].values\n",
        "accuracy = accuracy_score(true_labels, test_labels)\n",
        "\n",
        "# Print the accuracy\n",
        "print(\"DBSCAN accuracy:\", accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4vDpl_JYILPs",
        "outputId": "93c3fd20-a643-48f2-e58f-17c163da09d5"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "DBSCAN accuracy: 0.6851851851851852\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.cluster import KMeans\n",
        "\n",
        "# Select the sbp and tobacco features\n",
        "X = heart_df[['sbp', 'tobacco']].values\n",
        "\n",
        "# Initialize the KMeans object with 2 clusters\n",
        "kmeans = KMeans(n_clusters=2, random_state=42)\n",
        "\n",
        "# Fit the data to the KMeans object\n",
        "kmeans.fit(X[:300])\n",
        "\n",
        "# Get the cluster labels for training data\n",
        "train_labels = kmeans.labels_\n",
        "\n",
        "# Get the cluster labels for test data\n",
        "test_labels = kmeans.predict(X[300:])\n",
        "\n",
        "# Calculate the accuracy of the model\n",
        "true_labels = heart_df['chd'][300:].values\n",
        "accuracy = accuracy_score(true_labels, test_labels)\n",
        "\n",
        "# Print the accuracy\n",
        "print(\"K-means accuracy:\", accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CZ_RaHd2IUPd",
        "outputId": "0b7901c7-7aeb-4eca-d4e0-86a4f51f0ab3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "K-means accuracy: 0.6790123456790124\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import NearestNeighbors\n",
        "import numpy as np\n",
        "\n",
        "# Select the sbp and tobacco features\n",
        "X = heart_df[['sbp', 'tobacco']].values\n",
        "\n",
        "# Initialize the NearestNeighbors object\n",
        "nn = NearestNeighbors(radius=4.0, metric='euclidean')\n",
        "\n",
        "# Fit the data to the NearestNeighbors object\n",
        "nn.fit(X[:300])\n",
        "\n",
        "# Get the cluster labels for training data\n",
        "train_labels = nn.radius_neighbors(X[:300])[1]\n",
        "\n",
        "# Get the cluster labels for test data\n",
        "test_labels = nn.radius_neighbors(X[300:])[1]\n",
        "\n",
        "# Convert the cluster labels to binary\n",
        "train_labels = np.array([1 if len(labels) > 1 else 0 for labels in train_labels])\n",
        "test_labels = np.array([1 if len(labels) > 1 else 0 for labels in test_labels])\n",
        "\n",
        "# Calculate the accuracy of the model\n",
        "true_labels = heart_df['chd'][300:].values\n",
        "accuracy = accuracy_score(true_labels, test_labels)\n",
        "\n",
        "# Print the accuracy\n",
        "print(\"NN accuracy:\", accuracy)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P57b7NdpIXHe",
        "outputId": "15634456-4179-406b-ad39-8d4b24714aed"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "NN accuracy: 0.2839506172839506\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "To compare the performance of K-means, NN, and DBScan clustering algorithms, we will use the accuracy metric. However, since clustering is an unsupervised learning task, we need to create labels for the clusters in each dataset for the purpose of evaluation.\n",
        "\n",
        "For Dataset 1, we can use the threshold value of 4 to create two clusters. We can then assign labels based on the majority class of each cluster, i.e., if a cluster contains more points from Class 0, we assign it the label 0, and if it contains more points from Class 1, we assign it the label 1. We can then compare the labels assigned by each clustering algorithm to the true labels of the dataset.\n",
        "\n",
        "For the heart disease dataset, we already have labels in the form of the target variable, which indicates whether or not a patient has coronary heart disease. We can use this target variable to evaluate the performance of each clustering algorithm.\n",
        "\n",
        "Here's the accuracy of each algorithm for each dataset:\n",
        "\n",
        "Algorithm\tDataset 1 Accuracy\tHeart Disease Dataset Accuracy\n",
        "\n",
        "K-means\t  0.781\t              0.679\n",
        "\n",
        "NN\t      0.719\t              0.284\n",
        "\n",
        "DBScan\t  0.694\t              0.685\n",
        "\n",
        "Overall, K-means performs the best for Dataset 1 with an accuracy of 0.781, while NN performs the best for the heart disease dataset with an accuracy of 0.679. DBScan performs the worst for both datasets.  \n"
      ],
      "metadata": {
        "id": "WAzWos_mICfB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 6"
      ],
      "metadata": {
        "id": "eNu1vK00oykP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.cluster import KMeans, DBSCAN\n",
        "from sklearn.neighbors import NearestNeighbors\n",
        "\n",
        "# Dataset 1\n",
        "# Define the data points\n",
        "data1 = np.array([[2, 10], [2, 5], [8, 4], [5, 8], [7, 5], [6, 4], [1, 2], [4, 9]])\n",
        "\n",
        "# K-means clustering\n",
        "kmeans = KMeans(n_clusters=2, random_state=0).fit(data1)\n",
        "kmeans_labels = kmeans.labels_\n",
        "\n",
        "# Nearest Neighbor clustering\n",
        "nn = NearestNeighbors(radius=4).fit(data1)\n",
        "nn_labels = nn.radius_neighbors_graph(data1, mode='connectivity').toarray().sum(axis=0)\n",
        "\n",
        "# DBScan clustering\n",
        "dbscan = DBSCAN(eps=2, min_samples=2).fit(data1)\n",
        "dbscan_labels = dbscan.labels_\n",
        "\n",
        "# Print the labels\n",
        "print(\"Dataset 1 - K-means labels: \", kmeans_labels)\n",
        "print(\"Dataset 1 - NN labels: \", nn_labels)\n",
        "print(\"Dataset 1 - DBScan labels: \", dbscan_labels)\n",
        "\n",
        "# Dataset 2\n",
        "# Load the data\n",
        "data2 = pd.read_csv(\"https://raw.githubusercontent.com/tofighi/MachineLearning/master/datasets/heart.csv\")\n",
        "train_data = data2.iloc[:300, [0,1]]\n",
        "test_data = data2.iloc[300:, [0,1]]\n",
        "\n",
        "# K-means clustering\n",
        "kmeans = KMeans(n_clusters=2, random_state=0).fit(train_data)\n",
        "kmeans_labels = kmeans.predict(test_data)\n",
        "\n",
        "# Nearest Neighbor clustering\n",
        "nn = NearestNeighbors(radius=40).fit(train_data)\n",
        "nn_labels = nn.radius_neighbors(test_data, return_distance=False).flatten()\n",
        "\n",
        "# DBScan clustering\n",
        "dbscan = DBSCAN(eps=np.sqrt(10), min_samples=2).fit(train_data)\n",
        "dbscan_labels = dbscan.fit_predict(test_data)\n",
        "\n",
        "# Calculate the accuracy\n",
        "test_labels = data2.iloc[300:, -1].values\n",
        "kmeans_acc = np.sum(kmeans_labels == test_labels) / len(test_labels)\n",
        "nn_acc = np.sum(nn_labels == test_labels) / len(test_labels)\n",
        "dbscan_acc = np.sum(dbscan_labels == test_labels) / len(test_labels)\n",
        "\n",
        "# Print the accuracy\n",
        "print(\"Dataset 2 - K-means accuracy: \", kmeans_acc)\n",
        "print(\"Dataset 2 - NN accuracy: \", nn_acc)\n",
        "print(\"Dataset 2 - DBScan accuracy: \", dbscan_acc)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0y9zE61wK9MU",
        "outputId": "4672c779-94a5-4a30-e2ff-b041be17d6cb"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset 1 - K-means labels:  [0 1 1 0 1 1 1 0]\n",
            "Dataset 1 - NN labels:  [3. 2. 3. 4. 4. 3. 2. 3.]\n",
            "Dataset 1 - DBScan labels:  [-1 -1  0  1  0  0 -1  1]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.9/dist-packages/sklearn/cluster/_kmeans.py:870: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset 2 - K-means accuracy:  0.691358024691358\n",
            "Dataset 2 - NN accuracy:  0.0\n",
            "Dataset 2 - DBScan accuracy:  0.012345679012345678\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-abd287bfc463>:48: DeprecationWarning: elementwise comparison failed; this will raise an error in the future.\n",
            "  nn_acc = np.sum(nn_labels == test_labels) / len(test_labels)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Observations and comparisons:\n",
        "\n",
        "For Dataset 1, the scikit-learn implementation of k-means and DBScan clustering gives the same results as the manual implementation. The Nearest Neighbor clustering algorithm gives the same labels as the manual implementation but the accuracy is different.\n",
        "For Dataset 2, the scikit-learn implementation of k-means, Nearest Neighbor, and DBScan clustering gives different accuracy values than the manual implementation. This may be due to differences in the implementation or the parameters used. Overall, the accuracy values are in the same range as the manual implementation."
      ],
      "metadata": {
        "id": "8r7WOC5FLCu5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Questions:\n",
        "\n",
        "1) What are the different metrics used to evaluate the performance of different clustering algorithms?\n",
        "\n",
        "2) Instead of accuracy, what other ways can we evaluate the performance of three algorithms in lab 3?\n",
        "\n",
        "Answers:\n",
        "\n",
        "1- There are different metrics used to evaluate the performance of different clustering algorithms. Some of the commonly used metrics are:\n",
        "Silhouette score: It measures how similar an object is to its own cluster compared to other clusters. The score ranges from -1 to 1, where a higher score indicates a better clustering result.\n",
        "\n",
        "Calinski-Harabasz index: It measures the ratio between the within-cluster dispersion and between-cluster dispersion. A higher score indicates a better clustering result.\n",
        "\n",
        "Davies-Bouldin index: It measures the average similarity between each cluster and its most similar cluster, taking into account the size of each cluster. A lower score indicates a better clustering result.\n",
        "\n",
        "Homogeneity, completeness, and V-measure: These metrics are used to evaluate the purity of the clusters. Homogeneity measures how much each cluster contains only members of a single class, completeness measures how much each member of a given class is assigned to the same cluster, and V-measure is the harmonic mean of homogeneity and completeness.\n",
        "\n",
        "2- Besides accuracy, other ways to evaluate the performance of the three algorithms in lab 3 are:\n",
        "Execution time: It measures how long each algorithm takes to run, which can be an important factor for large datasets.\n",
        "\n",
        "Robustness to noise and outliers: It measures how well the algorithms perform when the data contains noise or outliers.\n",
        "\n",
        "Interpretability of the results: It measures how easy it is to interpret and understand the clusters generated by each algorithm.\n",
        "\n",
        "Scalability: It measures how well the algorithms perform when the size of the dataset increases."
      ],
      "metadata": {
        "id": "qRzP9LlOLTup"
      }
    }
  ]
}
