{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Lab  #4\n",
        "\n",
        "First and Last Name: Helana Youssef\n",
        "\n",
        "Student ID: 500766171\n"
      ],
      "metadata": {
        "id": "uaanFxysMcx_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 1"
      ],
      "metadata": {
        "id": "V6OU12S8g9Pt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def generate_data(n_samples):\n",
        "    x = np.random.uniform(-1, 1, size=n_samples)\n",
        "    y = 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "    return x, y\n",
        "\n",
        "n_samples = 30000\n",
        "x, y = generate_data(n_samples)\n",
        "\n",
        "plt.scatter(x, y, s=1)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "wmnKaWVbodCU",
        "outputId": "2a9a149e-f673-4b3d-f6b6-cf7f43d7b9d6"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Question* 2, 3, 4"
      ],
      "metadata": {
        "id": "WwgGl9c9ic7P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "    #code for the get_dataset function that generates x and y values according to the given function and shuffles the data if the shuffle argument is set to True\n",
        "\n",
        "def get_dataset(n_samples, shuffle=False):\n",
        "    x = np.random.uniform(-1, 1, size=n_samples)\n",
        "    y = 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "    if shuffle:\n",
        "        indices = np.random.permutation(n_samples)\n",
        "        x = x[indices]\n",
        "        y = y[indices]\n",
        "    return x, y\n",
        "\n",
        "    #code for the split_data function that splits the data into training, validation, and test sets according to the specified ratios\n",
        "\n",
        "def split_data(x, y, train_ratio=0.7, val_ratio=0.2, test_ratio=0.1):\n",
        "    n_samples = len(x)\n",
        "    n_train = int(n_samples * train_ratio)\n",
        "    n_val = int(n_samples * val_ratio)\n",
        "    n_test = n_samples - n_train - n_val\n",
        "\n",
        "    x_train = x[:n_train]\n",
        "    y_train = y[:n_train]\n",
        "    x_val = x[n_train:n_train+n_val]\n",
        "    y_val = y[n_train:n_train+n_val]\n",
        "    x_test = x[-n_test:]\n",
        "    y_test = y[-n_test:]\n",
        "\n",
        "    return (x_train, y_train), (x_val, y_val), (x_test, y_test)\n",
        "\n",
        "\n",
        "    #To use these functions, you can call get_dataset with the desired number of samples and shuffle argument\\\\\n",
        "    n_samples = 30000\n",
        "    x, y = get_dataset(n_samples, shuffle=True)\n",
        "\n",
        "    train_ratio = 0.6\n",
        "    val_ratio = 0.2\n",
        "    test_ratio = 0.2\n",
        "    (x_train, y_train), (x_val, y_val), (x_test, y_test) = split_data(x, y, train_ratio, val_ratio, test_ratio)\n",
        "\n",
        "    def scale_data(x, y):\n",
        "      x_min, x_max = np.min(x), np.max(x)\n",
        "      y_min, y_max = np.min(y), np.max(y)\n",
        "      x_scaled = (x - x_min) / (x_max - x_min)\n",
        "      y_scaled = (y - y_min) / (y_max - y_min)\n",
        "      return x_scaled, y_scaled\n",
        "\n",
        "    x_scaled_train, y_scaled_train = scale_data(x_train, y_train)\n",
        "    x_scaled_val, y_scaled_val = scale_data(x_val, y_val)\n",
        "    x_scaled_test, y_scaled_test = scale_data(x_test, y_test)\n",
        "\n",
        "    def evaluate_model(y_true, y_pred):\n",
        "      mae = mean_absolute_error(y_true, y_pred)\n",
        "      mse = mean_squared_error(y_true, y_pred)\n",
        "      rmse = np.sqrt(mse)\n",
        "      r2 = r2_score(y_true, y_pred)\n",
        "      return mae, mse, rmse, r2\n",
        "\n",
        "    mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "    print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))"
      ],
      "metadata": {
        "id": "wRM9dbgDpczq"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 5"
      ],
      "metadata": {
        "id": "cA5eaX6VmznC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Case 1"
      ],
      "metadata": {
        "id": "q_sK9qvHsbyD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='relu', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(8, activation='relu'),\n",
        "        tf.keras.layers.Dense(4, activation='relu'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test)\n",
        "scaler = MinMaxScaler()\n",
        "y_test_scaled = scaler.fit_transform(y_test)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fW6pmBEWsdSE",
        "outputId": "9c97d0f8-48ed-4c6a-87a2-9695b9e97bc0"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 24.6625 - val_loss: 0.0387\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0178 - val_loss: 0.0078\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0051 - val_loss: 0.0033\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0025 - val_loss: 0.0020\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0017 - val_loss: 0.0014\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0013 - val_loss: 0.0011\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0011 - val_loss: 9.3557e-04\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0010 - val_loss: 8.5941e-04\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 9.0768e-04 - val_loss: 0.0012\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 8.6720e-04 - val_loss: 7.0548e-04\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 7.4511e-04 - val_loss: 5.4777e-04\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 6.6246e-04 - val_loss: 4.6034e-04\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 5.8854e-04 - val_loss: 7.3974e-04\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 5.1592e-04 - val_loss: 4.1395e-04\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 4.8873e-04 - val_loss: 3.8552e-04\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 4.6059e-04 - val_loss: 3.1416e-04\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 4.0603e-04 - val_loss: 4.3941e-04\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 3.5437e-04 - val_loss: 2.4625e-04\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 3.7683e-04 - val_loss: 4.7724e-04\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.9599e-04 - val_loss: 3.6912e-04\n",
            "469/469 [==============================] - 0s 839us/step\n",
            "MAE: 38.52, MSE: 1489.43, RMSE: 38.59, R2 Score: -2578.42\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Unshuffled Data"
      ],
      "metadata": {
        "id": "eOwCAr3P0Ajv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.25, random_state=42)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='relu', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(8, activation='relu'),\n",
        "        tf.keras.layers.Dense(4, activation='relu'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test)\n",
        "scaler = MinMaxScaler()\n",
        "y_test_scaled = scaler.fit_transform(y_test)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3YHZ8UAp0Cpo",
        "outputId": "99d69844-1c3d-4dbc-e1dd-b8917742c9d7"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 88.0750 - val_loss: 74.6383\n",
            "Epoch 2/20\n",
            "1500/1500 [==============================] - 2s 2ms/step - loss: 63.6357 - val_loss: 52.7996\n",
            "Epoch 3/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 43.9998 - val_loss: 35.3651\n",
            "Epoch 4/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 28.5219 - val_loss: 21.8896\n",
            "Epoch 5/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 16.8587 - val_loss: 12.0817\n",
            "Epoch 6/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 8.7154 - val_loss: 5.6385\n",
            "Epoch 7/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 3.7362 - val_loss: 2.1117\n",
            "Epoch 8/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 1.3589 - val_loss: 0.7890\n",
            "Epoch 9/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.6579 - val_loss: 0.5659\n",
            "Epoch 10/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5806 - val_loss: 0.5625\n",
            "Epoch 11/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5795 - val_loss: 0.5627\n",
            "Epoch 12/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5795 - val_loss: 0.5626\n",
            "Epoch 13/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5794 - val_loss: 0.5632\n",
            "Epoch 14/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5794 - val_loss: 0.5625\n",
            "Epoch 15/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5795 - val_loss: 0.5624\n",
            "Epoch 16/20\n",
            "1500/1500 [==============================] - 2s 2ms/step - loss: 0.5795 - val_loss: 0.5628\n",
            "Epoch 17/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5795 - val_loss: 0.5624\n",
            "Epoch 18/20\n",
            "1500/1500 [==============================] - 2s 2ms/step - loss: 0.5795 - val_loss: 0.5631\n",
            "Epoch 19/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5795 - val_loss: 0.5633\n",
            "Epoch 20/20\n",
            "1500/1500 [==============================] - 3s 2ms/step - loss: 0.5794 - val_loss: 0.5634\n",
            "188/188 [==============================] - 0s 892us/step\n",
            "MAE: 38.58, MSE: 1488.62, RMSE: 38.58, R2 Score: -2580.34\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Case 2"
      ],
      "metadata": {
        "id": "mkgXqEiaswQk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Shuffle the data\n",
        "indices = np.arange(x.shape[0])\n",
        "np.random.shuffle(indices)\n",
        "x = x[indices]\n",
        "y = y[indices]\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(24, activation='relu', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred = model.predict(x_test)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "lgn40Q2Owvoi",
        "outputId": "86a9d315-9d34-4548-9c1b-203df579fb8b"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 35.7771 - val_loss: 0.1599\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0949 - val_loss: 0.0847\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0682 - val_loss: 0.0616\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0509 - val_loss: 0.0487\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0431 - val_loss: 0.0432\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0382 - val_loss: 0.0372\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0314 - val_loss: 0.0292\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0228 - val_loss: 0.0201\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0147 - val_loss: 0.0122\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0096 - val_loss: 0.0090\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0069 - val_loss: 0.0062\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0053 - val_loss: 0.0048\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0039 - val_loss: 0.0037\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0028 - val_loss: 0.0025\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0022 - val_loss: 0.0021\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0016 - val_loss: 0.0015\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0013 - val_loss: 0.0012\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0011 - val_loss: 0.0011\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0010 - val_loss: 8.8530e-04\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 8.3642e-04 - val_loss: 8.7895e-04\n",
            "469/469 [==============================] - 1s 1ms/step\n",
            "MAE: 0.02, MSE: 0.00, RMSE: 0.03, R2 Score: 1.00\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Unshuffled Data"
      ],
      "metadata": {
        "id": "HDPq6n_G1Mxh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(24, activation='relu', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred = model.predict(x_test)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9MTtnxAT1Omt",
        "outputId": "00e04830-102a-4576-fe52-c888f36e8010"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 3s 2ms/step - loss: 38.3877 - val_loss: 0.1390\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0803 - val_loss: 0.0668\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0592 - val_loss: 0.0509\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0471 - val_loss: 0.0426\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0403 - val_loss: 0.0365\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0343 - val_loss: 0.0298\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0270 - val_loss: 0.0220\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0190 - val_loss: 0.0153\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0127 - val_loss: 0.0102\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 2s 3ms/step - loss: 0.0090 - val_loss: 0.0071\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 2s 3ms/step - loss: 0.0067 - val_loss: 0.0053\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0051 - val_loss: 0.0042\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0040 - val_loss: 0.0031\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0029 - val_loss: 0.0022\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0022 - val_loss: 0.0018\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0018 - val_loss: 0.0021\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0015 - val_loss: 0.0014\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0013 - val_loss: 0.0014\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0011 - val_loss: 0.0011\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0010 - val_loss: 8.8900e-04\n",
            "469/469 [==============================] - 0s 896us/step\n",
            "MAE: 0.02, MSE: 0.00, RMSE: 0.03, R2 Score: 1.00\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Case 3"
      ],
      "metadata": {
        "id": "DEC_xMXnw6Dl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Scale the data\n",
        "scaler = MinMaxScaler()\n",
        "x_train_scaled = scaler.fit_transform(x_train)\n",
        "x_val_scaled = scaler.transform(x_val)\n",
        "x_test_scaled = scaler.transform(x_test)\n",
        "y_train_scaled = scaler.fit_transform(y_train)\n",
        "y_val_scaled = scaler.transform(y_val)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='tanh', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(8, activation='tanh'),\n",
        "        tf.keras.layers.Dense(4, activation='tanh'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train_scaled, y_train_scaled, validation_data=(x_val_scaled, y_val_scaled), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test_scaled)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "y_test = scaler.inverse_transform(y_test_scaled)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "FK5tt4Zmw7HM",
        "outputId": "8708bb60-bde8-4ab6-e38a-f13ed5ee5886"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0082 - val_loss: 0.0071\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0072 - val_loss: 0.0068\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0070 - val_loss: 0.0068\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0069 - val_loss: 0.0065\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0067 - val_loss: 0.0062\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0066 - val_loss: 0.0061\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0064 - val_loss: 0.0060\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0063 - val_loss: 0.0059\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0061 - val_loss: 0.0068\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0060 - val_loss: 0.0058\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0059 - val_loss: 0.0057\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 2s 3ms/step - loss: 0.0059 - val_loss: 0.0062\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0058 - val_loss: 0.0054\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0058 - val_loss: 0.0053\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0056 - val_loss: 0.0053\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0035 - val_loss: 4.5168e-04\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 3.9773e-04 - val_loss: 3.2966e-04\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 3.3507e-04 - val_loss: 2.6957e-04\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 3.0977e-04 - val_loss: 3.3231e-04\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.8035e-04 - val_loss: 2.1235e-04\n",
            "469/469 [==============================] - 1s 1ms/step\n",
            "MAE: 0.05, MSE: 0.00, RMSE: 0.06, R2 Score: 0.99\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Unshuffled Data"
      ],
      "metadata": {
        "id": "zZhaMKSX118J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train, y_train, test_size=0.4, random_state=42)\n",
        "\n",
        "# Scale the data\n",
        "scaler = MinMaxScaler()\n",
        "x_train_scaled = scaler.fit_transform(x_train)\n",
        "x_val_scaled = scaler.transform(x_val)\n",
        "x_test_scaled = scaler.transform(x_test)\n",
        "y_train_scaled = scaler.fit_transform(y_train)\n",
        "y_val_scaled = scaler.transform(y_val)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='tanh', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(8, activation='tanh'),\n",
        "        tf.keras.layers.Dense(4, activation='tanh'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train_scaled, y_train_scaled, validation_data=(x_val_scaled, y_val_scaled), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test_scaled)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "y_test_scaled = scaler.transform(y_test)\n",
        "y_test = scaler.inverse_transform(y_test_scaled)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "j-V1-4GV13bx",
        "outputId": "2704175f-04fe-4168-a870-aeef337850eb"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 4s 3ms/step - loss: 0.0120 - val_loss: 0.0072\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0072 - val_loss: 0.0067\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0069 - val_loss: 0.0067\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0068 - val_loss: 0.0064\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0065 - val_loss: 0.0061\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0061 - val_loss: 0.0056\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0050\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0031 - val_loss: 4.2575e-04\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 1.9790e-04 - val_loss: 1.3007e-04\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 6.8531e-05 - val_loss: 3.6682e-05\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.0684e-05 - val_loss: 9.7245e-06\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 9.4409e-06 - val_loss: 6.5547e-06\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 8.2909e-06 - val_loss: 4.4641e-06\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 7.4908e-06 - val_loss: 5.1431e-06\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 8.9048e-06 - val_loss: 9.3469e-06\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 1.4394e-05 - val_loss: 3.1872e-05\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 1.2459e-05 - val_loss: 8.4737e-06\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 9.0272e-06 - val_loss: 5.3181e-06\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 9.1581e-06 - val_loss: 3.5927e-06\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 1.0591e-05 - val_loss: 1.0034e-05\n",
            "469/469 [==============================] - 0s 938us/step\n",
            "MAE: 0.01, MSE: 0.00, RMSE: 0.01, R2 Score: 1.00\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Case 4"
      ],
      "metadata": {
        "id": "yV2z-6WuyBBv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Shuffle the data\n",
        "indices = np.arange(len(x))\n",
        "np.random.shuffle(indices)\n",
        "x = x[indices]\n",
        "y = y[indices]\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Scale the data\n",
        "scaler = MinMaxScaler()\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "x_val = scaler.transform(x_val)\n",
        "x_test = scaler.transform(x_test)\n",
        "y_train = scaler.fit_transform(y_train)\n",
        "y_val = scaler.transform(y_val)\n",
        "y_test = scaler.transform(y_test)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='relu', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(8, activation='relu'),\n",
        "        tf.keras.layers.Dense(4, activation='relu'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "9ZlRjs8syAkq",
        "outputId": "34964bc3-cabc-4df1-9f17-8c7abd76bf94"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 3s 2ms/step - loss: 0.0095 - val_loss: 0.0061\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0059 - val_loss: 0.0059\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0059 - val_loss: 0.0061\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0059 - val_loss: 0.0058\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0058 - val_loss: 0.0060\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0057 - val_loss: 0.0057\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0057 - val_loss: 0.0057\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 3ms/step - loss: 0.0057 - val_loss: 0.0056\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0057 - val_loss: 0.0056\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0056\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0057 - val_loss: 0.0056\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0057 - val_loss: 0.0056\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0057 - val_loss: 0.0063\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0058\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0055\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0057 - val_loss: 0.0071\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0056\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0056\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0069\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0056 - val_loss: 0.0056\n",
            "469/469 [==============================] - 0s 904us/step\n",
            "MAE: 9.65, MSE: 93.40, RMSE: 9.66, R2 Score: -2602.28\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Unshuffled Data"
      ],
      "metadata": {
        "id": "GwoGR0CL2mgj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Scale the data\n",
        "scaler = MinMaxScaler()\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "x_val = scaler.transform(x_val)\n",
        "x_test = scaler.transform(x_test)\n",
        "y_train = scaler.fit_transform(y_train)\n",
        "y_val = scaler.transform(y_val)\n",
        "y_test = scaler.transform(y_test)\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='relu', input_shape=[1]),\n",
        "        tf.keras.layers.Dense(8, activation='relu'),\n",
        "        tf.keras.layers.Dense(4, activation='relu'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test, y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test, y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "dRJ1njap2oZL",
        "outputId": "a4564b80-9caf-46d3-a7a2-7c084c02f272"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0178 - val_loss: 0.0060\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0062 - val_loss: 0.0059\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0062 - val_loss: 0.0061\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0062 - val_loss: 0.0061\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0062 - val_loss: 0.0059\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0061 - val_loss: 0.0058\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0060 - val_loss: 0.0061\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0060 - val_loss: 0.0057\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0051 - val_loss: 0.0039\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0026 - val_loss: 0.0015\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 2s 3ms/step - loss: 0.0011 - val_loss: 6.8534e-04\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 5.2076e-04 - val_loss: 3.5791e-04\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 3.1539e-04 - val_loss: 2.2180e-04\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 2.4462e-04 - val_loss: 3.3829e-04\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.2477e-04 - val_loss: 1.9229e-04\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.2635e-04 - val_loss: 2.3539e-04\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 2.1612e-04 - val_loss: 2.0268e-04\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.1223e-04 - val_loss: 2.4011e-04\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.1304e-04 - val_loss: 2.4389e-04\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.0778e-04 - val_loss: 2.1755e-04\n",
            "469/469 [==============================] - 0s 926us/step\n",
            "MAE: 9.60, MSE: 92.45, RMSE: 9.62, R2 Score: -2559.03\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Case 5"
      ],
      "metadata": {
        "id": "ObPu034Ly5Zk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "\n",
        "# Shuffle the data\n",
        "idx = np.arange(len(x))\n",
        "np.random.shuffle(idx)\n",
        "x = x[idx]\n",
        "y = y[idx]\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Scale the data\n",
        "scaler = MinMaxScaler()\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "x_val = scaler.transform(x_val)\n",
        "x_test = scaler.transform(x_test)\n",
        "y_train = scaler.fit_transform(y_train.reshape(-1, 1)).ravel()\n",
        "y_val = scaler.transform(y_val.reshape(-1, 1)).ravel()\n",
        "y_test = scaler.transform(y_test.reshape(-1, 1)).ravel()\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='tanh', input_shape=[x_train.shape[1]]),\n",
        "        tf.keras.layers.Dense(8, activation='tanh'),\n",
        "        tf.keras.layers.Dense(4, activation='tanh'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test[:, 0], y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test[:, 0], y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "q4WGEGLEy6fn",
        "outputId": "4f439447-9e92-4fa9-cfe6-cb4e3de0106c"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0093 - val_loss: 0.0066\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0068 - val_loss: 0.0067\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0068 - val_loss: 0.0069\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0067 - val_loss: 0.0064\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0067 - val_loss: 0.0067\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0067 - val_loss: 0.0063\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0067 - val_loss: 0.0064\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0066 - val_loss: 0.0063\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0065 - val_loss: 0.0068\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0064 - val_loss: 0.0060\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0059 - val_loss: 0.0054\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0046 - val_loss: 0.0034\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0019 - val_loss: 7.4262e-04\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 3.2693e-04 - val_loss: 2.2194e-04\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 1.4472e-04 - val_loss: 9.9217e-05\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 8.2564e-05 - val_loss: 9.7164e-05\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 4.8251e-05 - val_loss: 3.2763e-05\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 3.1498e-05 - val_loss: 1.6480e-05\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.2763e-05 - val_loss: 1.1383e-05\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 2.0632e-05 - val_loss: 1.3146e-05\n",
            "469/469 [==============================] - 0s 922us/step\n",
            "MAE: 9.63, MSE: 93.42, RMSE: 9.67, R2 Score: -38996295.03\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Unshuffled Data"
      ],
      "metadata": {
        "id": "j_vBz8s43EyH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Define the function to approximate\n",
        "def true_function(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Create 30,000 samples of x and y data\n",
        "x = np.random.uniform(-1, 1, size=(30000, 1))\n",
        "y = true_function(x)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set random seed for reproducibility\n",
        "np.random.seed(42)\n",
        "tf.random.set_seed(42)\n",
        "\n",
        "# Split the data into train, validation, and test sets\n",
        "x_train_val, x_test, y_train_val, y_test = train_test_split(x, y, test_size=0.5, random_state=42)\n",
        "x_train, x_val, y_train, y_val = train_test_split(x_train_val, y_train_val, test_size=0.4, random_state=42)\n",
        "\n",
        "# Scale the data\n",
        "scaler = MinMaxScaler()\n",
        "x_train = scaler.fit_transform(x_train)\n",
        "x_val = scaler.transform(x_val)\n",
        "x_test = scaler.transform(x_test)\n",
        "y_train = scaler.fit_transform(y_train.reshape(-1, 1)).ravel()\n",
        "y_val = scaler.transform(y_val.reshape(-1, 1)).ravel()\n",
        "y_test = scaler.transform(y_test.reshape(-1, 1)).ravel()\n",
        "\n",
        "# Define function to create and compile the neural network model\n",
        "def create_model():\n",
        "    model = tf.keras.models.Sequential([\n",
        "        tf.keras.layers.Dense(12, activation='tanh', input_shape=[x_train.shape[1]]),\n",
        "        tf.keras.layers.Dense(8, activation='tanh'),\n",
        "        tf.keras.layers.Dense(4, activation='tanh'),\n",
        "        tf.keras.layers.Dense(1)\n",
        "    ])\n",
        "    model.compile(loss='mse', optimizer='adam')\n",
        "    return model\n",
        "\n",
        "# Create and compile the model\n",
        "model = create_model()\n",
        "\n",
        "# Train the model\n",
        "history = model.fit(x_train, y_train, validation_data=(x_val, y_val), batch_size=12, epochs=20)\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "y_pred_scaled = model.predict(x_test)\n",
        "y_pred = scaler.inverse_transform(y_pred_scaled)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "def evaluate_model(y_true, y_pred):\n",
        "    mae = np.mean(np.abs(y_true - y_pred))\n",
        "    mse = np.mean((y_true - y_pred)**2)\n",
        "    rmse = np.sqrt(mse)\n",
        "    ss_res = np.sum((y_true - y_pred)**2)\n",
        "    ss_tot = np.sum((y_true - np.mean(y_true))**2)\n",
        "    r2 = 1 - ss_res / ss_tot\n",
        "    return mae, mse, rmse, r2\n",
        "\n",
        "mae, mse, rmse, r2 = evaluate_model(y_test, y_pred)\n",
        "print(\"MAE: {:.2f}, MSE: {:.2f}, RMSE: {:.2f}, R2 Score: {:.2f}\".format(mae, mse, rmse, r2))\n",
        "\n",
        "# Plot the actual vs. predicted values on the test set\n",
        "plt.scatter(x_test[:, 0], y_test, s=1, label='Actual')\n",
        "plt.scatter(x_test[:, 0], y_pred, s=1, label='Predicted')\n",
        "plt.legend()\n",
        "plt.title('Actual vs. Predicted Values')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()\n",
        "\n",
        "# Plot the training and validation loss curves\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.legend()\n",
        "plt.title('Training and Validation Loss Curves')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Loss')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0M1QpaW83GQK",
        "outputId": "69049853-6117-4477-d230-e6465d91b393"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0123 - val_loss: 0.0065\n",
            "Epoch 2/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0067 - val_loss: 0.0064\n",
            "Epoch 3/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0066 - val_loss: 0.0064\n",
            "Epoch 4/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0065 - val_loss: 0.0063\n",
            "Epoch 5/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0063 - val_loss: 0.0060\n",
            "Epoch 6/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0061 - val_loss: 0.0057\n",
            "Epoch 7/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0058 - val_loss: 0.0056\n",
            "Epoch 8/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0055 - val_loss: 0.0052\n",
            "Epoch 9/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 0.0049 - val_loss: 0.0049\n",
            "Epoch 10/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 0.0030 - val_loss: 0.0010\n",
            "Epoch 11/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.4819e-04 - val_loss: 3.0212e-05\n",
            "Epoch 12/20\n",
            "750/750 [==============================] - 2s 3ms/step - loss: 1.9431e-05 - val_loss: 1.1394e-05\n",
            "Epoch 13/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 1.5479e-05 - val_loss: 1.2427e-05\n",
            "Epoch 14/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 1.4540e-05 - val_loss: 2.4489e-05\n",
            "Epoch 15/20\n",
            "750/750 [==============================] - 1s 2ms/step - loss: 1.5347e-05 - val_loss: 1.8458e-05\n",
            "Epoch 16/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 2.1549e-05 - val_loss: 6.1324e-05\n",
            "Epoch 17/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 1.9572e-05 - val_loss: 1.9724e-05\n",
            "Epoch 18/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 1.4819e-05 - val_loss: 1.8967e-05\n",
            "Epoch 19/20\n",
            "750/750 [==============================] - 2s 3ms/step - loss: 1.7425e-05 - val_loss: 1.7906e-05\n",
            "Epoch 20/20\n",
            "750/750 [==============================] - 2s 2ms/step - loss: 1.6732e-05 - val_loss: 2.2370e-05\n",
            "469/469 [==============================] - 1s 1ms/step\n",
            "MAE: 9.63, MSE: 93.42, RMSE: 9.67, R2 Score: -38801704.05\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Question 6"
      ],
      "metadata": {
        "id": "eNu1vK00oykP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Define the function to approximate\n",
        "def func(x):\n",
        "    return 0.2 * x**4 + 2 * x**3 + 0.1 * x**2 + 10\n",
        "\n",
        "# Generate 30,000 samples of x values between -1 and 1\n",
        "x = np.linspace(-1, 1, 30000)\n",
        "\n",
        "# Calculate the corresponding y values for each x\n",
        "y = func(x)\n",
        "\n",
        "\n",
        "# Define the sigmoid function and its derivative\n",
        "def sigmoid(x, derivative=False):\n",
        "    if derivative:\n",
        "        return sigmoid(x) * (1 - sigmoid(x))\n",
        "    return 1 / (1 + np.exp(-x))\n",
        "\n",
        "# Define the neural network class\n",
        "class NeuralNetwork:\n",
        "    def __init__(self, input_size, hidden_size, output_size):\n",
        "        self.input_size = input_size\n",
        "        self.hidden_size = hidden_size\n",
        "        self.output_size = output_size\n",
        "        \n",
        "        # Initialize weights randomly\n",
        "        self.W1 = np.random.randn(self.input_size, self.hidden_size)\n",
        "        self.W2 = np.random.randn(self.hidden_size, self.output_size)\n",
        "        \n",
        "    def forward(self, X):\n",
        "        # Compute the dot product between input and first layer weights\n",
        "        self.z2 = np.dot(X, self.W1)\n",
        "        \n",
        "        # Apply the sigmoid activation function to the first layer\n",
        "        self.a2 = sigmoid(self.z2)\n",
        "        \n",
        "        # Compute the dot product between first and second layer weights\n",
        "        self.z3 = np.dot(self.a2, self.W2)\n",
        "        \n",
        "        # Apply the sigmoid activation function to the output layer\n",
        "        y_hat = sigmoid(self.z3)\n",
        "        \n",
        "        return y_hat\n",
        "    \n",
        "    def cost(self, X, y):\n",
        "        # Compute the mean squared error between predicted and actual outputs\n",
        "        y_hat = self.forward(X)\n",
        "        J = 0.5 * np.mean((y - y_hat)**2)\n",
        "        return J\n",
        "    \n",
        "    def backward(self, X, y, learning_rate):\n",
        "        # Compute the error between predicted and actual outputs\n",
        "        y_hat = self.forward(X)\n",
        "        delta3 = np.multiply(-(y - y_hat), sigmoid(self.z3, derivative=True))\n",
        "        \n",
        "        # Compute the error for the first layer\n",
        "        delta2 = np.dot(delta3, self.W2.T) * sigmoid(self.z2, derivative=True)\n",
        "        \n",
        "        # Compute the gradients for the weights\n",
        "        dW2 = np.dot(self.a2.T, delta3)\n",
        "        dW1 = np.dot(X.T, delta2)\n",
        "        \n",
        "        # Update the weights with the gradients and learning rate\n",
        "        self.W2 -= learning_rate * dW2\n",
        "        self.W1 -= learning_rate * dW1\n",
        "    \n",
        "    def train(self, X, y, learning_rate, epochs):\n",
        "        for i in range(epochs):\n",
        "            # Perform forward and backward propagation for each epoch\n",
        "            self.backward(X, y, learning_rate)\n",
        "            J = self.cost(X, y)\n",
        "            \n",
        "            # Print the cost every 100 epochs\n",
        "            if i % 100 == 0:\n",
        "                print(\"Epoch\", i, \"Cost:\", J)\n",
        "\n",
        "# Define the input and output data\n",
        "X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n",
        "y = np.array([[0], [1], [1], [0]])\n",
        "\n",
        "# Initialize the neural network with 2 input nodes, 2 hidden nodes, and 1 output node\n",
        "nn = NeuralNetwork(2, 2, 1)\n",
        "\n",
        "# Train the neural network with a learning rate of 0.1 and 1000 epochs\n",
        "nn.train(X, y, 0.1, 1000)\n",
        "\n",
        "# Print the final predictions for the input data\n",
        "print(\"Final Predictions:\")\n",
        "for i in range(len(X)):\n",
        "    print(X[i], \"->\", nn.forward(X[i]))\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H8RI9FFi3Slj",
        "outputId": "80417221-073e-4778-d9fa-b096fa350210"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0 Cost: 0.1277968069188716\n",
            "Epoch 100 Cost: 0.1250227024304439\n",
            "Epoch 200 Cost: 0.12496185643123382\n",
            "Epoch 300 Cost: 0.1249389734301425\n",
            "Epoch 400 Cost: 0.12491523081829062\n",
            "Epoch 500 Cost: 0.12488935336333253\n",
            "Epoch 600 Cost: 0.12486056067911702\n",
            "Epoch 700 Cost: 0.12482802655243627\n",
            "Epoch 800 Cost: 0.12479084472172813\n",
            "Epoch 900 Cost: 0.1247479971305899\n",
            "Final Predictions:\n",
            "[0 0] -> [0.50040649]\n",
            "[0 1] -> [0.49218469]\n",
            "[1 0] -> [0.51106145]\n",
            "[1 1] -> [0.50024679]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The goal of this question is to design a neural network that can accurately classify the XOR inputs based on their values, without using any pre-built libraries or APIs. This involves specifying the various parameters of the neural network, including the number of layers, activation functions, loss function, etc.\n",
        "\n",
        "Once the neural network has been designed, it must be trained on the given truth table to accurately classify the XOR inputs. Finally, the neural network's predictions for each input should be printed to demonstrate its accuracy."
      ],
      "metadata": {
        "id": "x4yuUTY-5eZk"
      }
    }
  ]
}
